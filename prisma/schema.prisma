// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String         @id @default(cuid())
  email           String         @unique
  emailVerified   DateTime?
  name            String?
  image           String?
  hashedPassword  String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  // Relations
  accounts      Account[]
  sessions      Session[]
  subscriptions Subscription[]
  categories    UserCategory[]
  notifications NotificationPreference?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Application models
model Subscription {
  id              String       @id @default(cuid())
  userId          String
  name            String
  description     String?      // サービスの説明
  amount          Decimal      @db.Decimal(10, 2)
  currency        String       @default("JPY")
  billingCycle    BillingCycle @default(MONTHLY)
  nextBillingDate DateTime
  firstBillingDate DateTime?   // 初回契約日
  category        Category
  isActive        Boolean      @default(true)
  isTrial         Boolean      @default(false) // 無料トライアル中
  trialEndDate    DateTime?    // トライアル終了日
  url             String?      // サービスURL
  color           String?      // カスタムカラー（UI表示用）
  iconUrl         String?      // サービスアイコンURL
  notes           String?      @db.Text
  
  // 自動更新設定
  autoRenew       Boolean      @default(true)
  cancelledAt     DateTime?    // 解約日
  
  // 支払い履歴の追跡
  lastPaymentDate DateTime?
  paymentMethod   String?      // クレジットカード、銀行引き落としなど
  
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt

  // Relations
  user            User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  payments        Payment[]
  reminders       Reminder[]

  @@index([userId])
  @@index([nextBillingDate])
  @@index([category])
  @@index([isActive])
}

// 支払い履歴
model Payment {
  id               String       @id @default(cuid())
  subscriptionId   String
  amount           Decimal      @db.Decimal(10, 2)
  currency         String
  paidAt           DateTime
  paymentMethod    String?
  status           PaymentStatus @default(COMPLETED)
  notes            String?
  
  createdAt        DateTime     @default(now())
  
  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@index([subscriptionId])
  @@index([paidAt])
}

// リマインダー設定
model Reminder {
  id               String       @id @default(cuid())
  subscriptionId   String
  daysBefore       Int          // 何日前に通知
  isEnabled        Boolean      @default(true)
  lastSentAt       DateTime?    // 最後に送信した日時
  
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  
  subscription     Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  
  @@unique([subscriptionId, daysBefore])
}

// ユーザーカスタムカテゴリ
model UserCategory {
  id          String   @id @default(cuid())
  userId      String
  name        String
  color       String   // HEXカラーコード
  icon        String?  // アイコン名
  sortOrder   Int      @default(0)
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, name])
  @@index([userId])
}

// 通知設定
model NotificationPreference {
  id                    String   @id @default(cuid())
  userId                String   @unique
  emailEnabled          Boolean  @default(true)
  reminderDays          Int      @default(7) // デフォルト通知日数
  weeklyReport          Boolean  @default(false)
  monthlyReport         Boolean  @default(true)
  priceChangeAlert      Boolean  @default(true)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// Enums
enum BillingCycle {
  DAILY
  WEEKLY
  MONTHLY
  QUARTERLY
  SEMI_ANNUAL
  YEARLY
  LIFETIME    // 買い切り
  CUSTOM
}

enum Category {
  ENTERTAINMENT    // エンターテインメント
  PRODUCTIVITY    // 生産性・仕事
  EDUCATION       // 教育・学習
  CLOUD_STORAGE   // クラウドストレージ
  MUSIC          // 音楽
  VIDEO          // 動画・映像
  NEWS           // ニュース・情報
  FINANCE        // 金融・投資
  HEALTH         // 健康・フィットネス
  SHOPPING       // ショッピング・EC
  GAMING         // ゲーム
  SOFTWARE       // ソフトウェア・ツール
  COMMUNICATION  // コミュニケーション
  TRAVEL         // 旅行・移動
  FOOD           // フード・デリバリー
  OTHER          // その他
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}